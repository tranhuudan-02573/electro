x-logging: &default-logging
  driver: loki
  options:
    loki-url: 'http://localhost:3100/api/prom/push'
    loki-pipeline-stages: |
      - multiline:
          firstline: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}.\d{3}'
          max_wait_time: 3s
      - regex:
          expression: '^(?P<date>\d{4}-\d{2}-\d{2}) (?P<time>\d{2}:\d{2}:\d{2}.\d{3}) (?P<message>(?s:.*))$$'

version: "3.4"

services:

  # Infrastructure

  loki:
    image: grafana/loki:2.9.2
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"

  prometheus:
    image: prom/prometheus:v2.47.2
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/workspace
    command:
      - --config.file=/workspace/prometheus.yml
      - --enable-feature=exemplar-storage
    depends_on:
      - loki
    logging: *default-logging

  tempo:
    image: grafana/tempo:2.2.4
    command: [ "--target=all", "--storage.trace.backend=local", "--storage.trace.local.path=/var/tempo", "--auth.enabled=false" ]
    ports:
      - "14250:14250"
      - "4317:4317"
    depends_on:
      - loki
    logging: *default-logging

  grafana:
    image: grafana/grafana:10.2.0
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/:/etc/grafana/provisioning/datasources
      - ./dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml
      - ./dashboards:/etc/grafana/dashboards
    depends_on:
      - loki
      - prometheus
    logging: *default-logging

  # Applications

  app-a:
    build: ./app/
    environment:
      - TARGET_ONE_HOST=app-b
      - TARGET_TWO_HOST=app-c
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://tempo:4317 # send traces to Tempo
      - OTEL_SERVICE_NAME=app-a # service name for Span
      - OTEL_RESOURCE_ATTRIBUTES=compose_service=app-a # add custom resource attribute to Span for Grafana Trace to Logs feature
      - OTEL_METRICS_EXPORTER=none # disable metrics exporter
      - MANAGEMENT_METRICS_TAGS_APPLICATION=app-a # override default value of management.metrics.tags.application in app/src/main/resources/application.properties
    ports:
      - "8080:8080"
    logging: *default-logging

  app-b:
    build: ./app/
    environment:
      - TARGET_ONE_HOST=app-b
      - TARGET_TWO_HOST=app-c
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://tempo:4317
      - OTEL_SERVICE_NAME=app-b
      - OTEL_RESOURCE_ATTRIBUTES=compose_service=app-b
      - OTEL_METRICS_EXPORTER=none
      - MANAGEMENT_METRICS_TAGS_APPLICATION=app-b
    ports:
      - "8081:8080"
    logging: *default-logging

  app-c:
    build: ./app/
    environment:
      - TARGET_ONE_HOST=app-b
      - TARGET_TWO_HOST=app-c
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://tempo:4317
      - OTEL_SERVICE_NAME=app-c
      - OTEL_RESOURCE_ATTRIBUTES=compose_service=app-c
      - OTEL_METRICS_EXPORTER=none
      - MANAGEMENT_METRICS_TAGS_APPLICATION=app-c
    ports:
      - "8082:8080"
    logging: *default-logging

  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: 12345
      MYSQL_DATABASE: electro
      LANG: C.UTF-8 
    ports:
      - "3306:3306"
    volumes:
      - ./mysql-data:/var/lib/mysql
    command: --sql_mode="STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION" --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --general-log=1 --general-log-file=/tmp/mysql-general-log.log
    healthcheck:
      # Reference: https://stackoverflow.com/a/74905088
      test: 'cat /tmp/mysql-general-log.log | grep "Tcp port: 3306"'
      interval: 5s
      timeout: 30s
      retries: 20
    logging: *default-logging
  redis:
    image: redis:7.2.2
    container_name: redis
    ports:
      - "6379:6379"
    logging: *default-logging
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-commander
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8083:8081"
    depends_on:
      - redis
  
  
  sonarqube:
    image: sonarqube:community
    hostname: sonarqube
    container_name: sonarqube
    depends_on:
      - db-sonar
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://db:5432/sonar
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonar
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    ports:
      - "9000:9000"
  db-sonar:
    image: postgres:13
    hostname: postgresql
    container_name: postgresql
    environment:
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar
      POSTGRES_DB: sonar
    volumes:
      - ./postgresql_data:/var/lib/postgresql/data
      
  jenkins:
    image: jenkins/jenkins
    ports:
      - "8084:8080"
      - "50000:50000"
    volumes:
      - jenkins_home:/var/jenkins_home
      

  Elasticsearch:
    image: elasticsearch:7.16.2
    container_name: elasticsearch 
    volumes:
    - elastic_data:/usr/share/elasticsearch/data/
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      discovery.type: single-node    
    ports:
    - '9200:9200'
    - '9300:9300'

  Logstash:
    image: logstash:7.16.2
    container_name: logstash 
    volumes:
    - ./logstash/:/logstash_dir
    command: logstash -f /logstash_dir/logstash.conf 
    depends_on:
      - Elasticsearch
    ports:
    - '9600:9600'
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"  

  Kibana:
    image: kibana:7.16.2
    container_name: kibana     
    ports:
    - '5601:5601'
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200  
    depends_on:
      - Elasticsearch  


